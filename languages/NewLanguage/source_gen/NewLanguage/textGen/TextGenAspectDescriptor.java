package NewLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import NewLanguage.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.ActionDelay:
        return new ActionDelay_TextGen();
      case LanguageConceptSwitch.ActuatorReference:
        return new ActuatorReference_TextGen();
      case LanguageConceptSwitch.ActuatorState:
        return new ActuatorState_TextGen();
      case LanguageConceptSwitch.Application:
        return new Application_TextGen();
      case LanguageConceptSwitch.SensorComparison:
        return new SensorComparison_TextGen();
      case LanguageConceptSwitch.SensorHighLowAction:
        return new SensorHighLowAction_TextGen();
      case LanguageConceptSwitch.SensorHighLowComparison:
        return new SensorHighLowComparison_TextGen();
      case LanguageConceptSwitch.StateDeclaration:
        return new StateDeclaration_TextGen();
      case LanguageConceptSwitch.Transition:
        return new Transition_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.Application$eT)) {
        String fname = getFileName_Application(root);
        String ext = getFileExtension_Application(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Application(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$KWlB);
  }
  private static String getFileExtension_Application(SNode node) {
    return "ino";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Application$eT = MetaAdapterFactory.getConcept(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000877d9L, "NewLanguage.structure.Application");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$KWlB = MetaAdapterFactory.getProperty(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000877d9L, 0x62cf56e9000a22f5L, "name");
  }
}
