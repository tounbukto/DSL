package NewLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class Application_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("#include <avr/io.h> \n");
    tgs.append("#include <arduino.h> \n");
    tgs.newLine();
    tgs.append("//######### CAPTOR DECLARATION ############\n");
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actionneurs$gx_$)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.append("int ");
        tgs.append(SPropertyOperations.getString(it, PROPS.name$qsqd));
        tgs.append(" = ");
        tgs.append(String.valueOf(SPropertyOperations.getInteger(it, PROPS.broche$_91N)));
        tgs.append(";\n");
      }
    });
    tgs.newLine();
    tgs.append("//######### ACTUATOR DECLARATION ##########\n");
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.capteurs$wRmJ)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.append("int ");
        tgs.append(SPropertyOperations.getString(it, PROPS.name$qsqd));
        tgs.append(" = ");
        tgs.append(String.valueOf(SPropertyOperations.getInteger(it, PROPS.broche$_91N)));
        tgs.append(";\n");
      }
    });
    tgs.newLine();
    tgs.append("//######### STEPS DECALARATION ############\n");
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.states$4HYI)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.append("void ");
        tgs.append(SPropertyOperations.getString(it, PROPS.name$JdHN));
        tgs.append("();\n");
      }
    });
    tgs.newLine();
    tgs.append("//######### STEPS DEFINITION ##############\n");
    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.states$4HYI)) {
      tgs.appendNode(item);
    }
    tgs.newLine();
    tgs.append("void setup() {\n");
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actionneurs$gx_$)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.append("pinMode(");
        tgs.append(SPropertyOperations.getString(it, PROPS.name$qsqd));
        tgs.append(", ");
        tgs.append("OUTPUT);\n");
      }
    });
    tgs.indent();
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.capteurs$wRmJ)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.append("pinMode(");
        tgs.append(SPropertyOperations.getString(it, PROPS.name$qsqd));
        tgs.append(", ");
        tgs.append("INPUT);\n");
      }
    });
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}\n");

    tgs.append("void loop() {\n");
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append(SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.states$4HYI)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, PROPS.initial$MUS9);
      }
    }), PROPS.name$JdHN));
    tgs.append("();\n");
    tgs.indent();
    tgs.append("return 0;\n");
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}\n");

  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actionneurs$gx_$ = MetaAdapterFactory.getContainmentLink(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000877d9L, 0x62cf56e9000a425bL, "actionneurs");
    /*package*/ static final SContainmentLink capteurs$wRmJ = MetaAdapterFactory.getContainmentLink(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000877d9L, 0x62cf56e9000a1c3eL, "capteurs");
    /*package*/ static final SContainmentLink states$4HYI = MetaAdapterFactory.getContainmentLink(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000877d9L, 0x62cf56e9000a51c7L, "states");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$qsqd = MetaAdapterFactory.getProperty(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000abf07L, 0x62cf56e9000abfbeL, "name");
    /*package*/ static final SProperty broche$_91N = MetaAdapterFactory.getProperty(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000abf07L, 0x62cf56e9000ac0f8L, "broche");
    /*package*/ static final SProperty name$JdHN = MetaAdapterFactory.getProperty(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000a589aL, 0x62cf56e9000a58e9L, "name");
    /*package*/ static final SProperty initial$MUS9 = MetaAdapterFactory.getProperty(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000a589aL, 0x70fdfc205b84ed1cL, "initial");
  }
}
