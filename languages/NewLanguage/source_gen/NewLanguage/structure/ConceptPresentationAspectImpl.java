package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Actionneur;
  private ConceptPresentation props_ActuatorState;
  private ConceptPresentation props_Application;
  private ConceptPresentation props_BaseTransaction;
  private ConceptPresentation props_Brick;
  private ConceptPresentation props_Capteur;
  private ConceptPresentation props_PitchActuator;
  private ConceptPresentation props_SensorComparisonTransaction;
  private ConceptPresentation props_State;
  private ConceptPresentation props_Transaction;
  private ConceptPresentation props_TransitionDelay;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Actionneur:
        if (props_Actionneur == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Actionneur");
          props_Actionneur = cpb.create();
        }
        return props_Actionneur;
      case LanguageConceptSwitch.ActuatorState:
        if (props_ActuatorState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x6be0c4403d48a0e3L, 0x6be0c4403d48a48eL, "actuator", "", "");
          props_ActuatorState = cpb.create();
        }
        return props_ActuatorState;
      case LanguageConceptSwitch.Application:
        if (props_Application == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Application");
          props_Application = cpb.create();
        }
        return props_Application;
      case LanguageConceptSwitch.BaseTransaction:
        if (props_BaseTransaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BaseTransaction");
          props_BaseTransaction = cpb.create();
        }
        return props_BaseTransaction;
      case LanguageConceptSwitch.Brick:
        if (props_Brick == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Brick");
          props_Brick = cpb.create();
        }
        return props_Brick;
      case LanguageConceptSwitch.Capteur:
        if (props_Capteur == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Capteur");
          props_Capteur = cpb.create();
        }
        return props_Capteur;
      case LanguageConceptSwitch.PitchActuator:
        if (props_PitchActuator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x6be0c4403d48a0e3L, 0x6be0c4403d48a48eL, "actuator", "", "");
          props_PitchActuator = cpb.create();
        }
        return props_PitchActuator;
      case LanguageConceptSwitch.SensorComparisonTransaction:
        if (props_SensorComparisonTransaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x3129c9e0bc3c4036L, 0x815e27f12b196e5eL, 0x62cf56e9000a928aL, 0x62cf56e9000ab5dfL, "sensor", "", "");
          props_SensorComparisonTransaction = cpb.create();
        }
        return props_SensorComparisonTransaction;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("State");
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.Transaction:
        if (props_Transaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Transaction");
          props_Transaction = cpb.create();
        }
        return props_Transaction;
      case LanguageConceptSwitch.TransitionDelay:
        if (props_TransitionDelay == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TransitionDelay");
          props_TransitionDelay = cpb.create();
        }
        return props_TransitionDelay;
    }
    return null;
  }
}
